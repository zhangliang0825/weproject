var  hex_md5 = require("md5-node");
var CryptoJS = require("crypto-js")

function Base64() {
    _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    this.encode = function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = _utf8_encode(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64
            } else {
                if (isNaN(chr3)) {
                    enc4 = 64
                }
            }
            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4)
        }
        return output
    }
    ;
    this.decode = function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        while (i < input.length) {
            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2)
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3)
            }
        }
        output = _utf8_decode(output);
        return output
    }
    ;
    _utf8_encode = function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c)
            } else {
                if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128)
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128)
                }
            }
        }
        return utftext
    }
    ;
    _utf8_decode = function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;
        while (i < utftext.length) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++
            } else {
                if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3
                }
            }
        }
        return string
    }
}

const askgIckWlNzZ="arK4Uuy2Y7Kz5oVx";const asiomemyDBBI="bIwXxYV0AeV5rvqn";const ackvil1N6QPv="d6gJRVvqbE2dwQbM";const aciFr8av9mHO="fvVgJSlN6B3J57ql";const dskqPvSVzXLr="hHF00VtOAdJ4hhcA";const dsi9uS1brZ0i="xnEOWkCzHjBEEown";const dckgtSpkD1pl="oy4I3YCEdcsmySQO";const dciVC0k1SGiY="pwxg81lxfhd1EMyx";const aes_local_key='emhlbnFpcGFsbWtleQ==';const aes_local_iv='emhlbnFpcGFsbWl2';var BASE64={encrypt:function(text){var b=new Base64();return b.encode(text)},decrypt:function(text){var b=new Base64();return b.decode(text)}};var DES={encrypt:function(text,key,iv){var secretkey=(CryptoJS.MD5(key).toString()).substr(0,16);var secretiv=(CryptoJS.MD5(iv).toString()).substr(24,8);secretkey=CryptoJS.enc.Utf8.parse(secretkey);secretiv=CryptoJS.enc.Utf8.parse(secretiv);var result=CryptoJS.DES.encrypt(text,secretkey,{iv:secretiv,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return result.toString()},decrypt:function(text,key,iv){var secretkey=(CryptoJS.MD5(key).toString()).substr(0,16);var secretiv=(CryptoJS.MD5(iv).toString()).substr(24,8);secretkey=CryptoJS.enc.Utf8.parse(secretkey);secretiv=CryptoJS.enc.Utf8.parse(secretiv);var result=CryptoJS.DES.decrypt(text,secretkey,{iv:secretiv,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return result.toString(CryptoJS.enc.Utf8)}};var AES={encrypt:function(text,key,iv){var secretkey=(CryptoJS.MD5(key).toString()).substr(16,16);var secretiv=(CryptoJS.MD5(iv).toString()).substr(0,16);secretkey=CryptoJS.enc.Utf8.parse(secretkey);secretiv=CryptoJS.enc.Utf8.parse(secretiv);var result=CryptoJS.AES.encrypt(text,secretkey,{iv:secretiv,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return result.toString()},decrypt:function(text,key,iv){var secretkey=(CryptoJS.MD5(key).toString()).substr(16,16);var secretiv=(CryptoJS.MD5(iv).toString()).substr(0,16);secretkey=CryptoJS.enc.Utf8.parse(secretkey);secretiv=CryptoJS.enc.Utf8.parse(secretiv);var result=CryptoJS.AES.decrypt(text,secretkey,{iv:secretiv,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return result.toString(CryptoJS.enc.Utf8)}};var localStorageUtil={save:function(name,value){var text=JSON.stringify(value);text=BASE64.encrypt(text);text=AES.encrypt(text,aes_local_key,aes_local_iv);try{localStorage.setItem(name,text)}catch(oException){if(oException.name==='QuotaExceededError'){localStorage.clear();localStorage.setItem(name,text)}}},check:function(name){return localStorage.getItem(name)},getValue:function(name){var text=localStorage.getItem(name);var result=null;if(text){text=AES.decrypt(text,aes_local_key,aes_local_iv);text=BASE64.decrypt(text);result=JSON.parse(text)}return result},remove:function(name){localStorage.removeItem(name)}};function dSDvp3y0xhb(pqq3EtA){pqq3EtA=DES.decrypt(pqq3EtA,dskqPvSVzXLr,dsi9uS1brZ0i);return pqq3EtA}function dM1AMCuyig(pqq3EtA){pqq3EtA=BASE64.decrypt(pqq3EtA);return pqq3EtA}function gL4qse5iK8s2nPfJ(key,period){if(typeof period==='undefined'){period=0}var d=DES.encrypt(key);d=BASE64.encrypt(key);var data=localStorageUtil.getValue(key);if(data){const time=data.time;const current=new Date().getTime();if(new Date().getHours()>=0&&new Date().getHours()<5&&period>1){period=1}if(current-(period*60*60*1000)>time){data=null}if(new Date().getHours()>=5&&new Date(time).getDate()!==new Date().getDate()&&period===24){data=null}}return data}function ObjectSort(obj){var newObject={};Object.keys(obj).sort().map(function(key){newObject[key]=obj[key]});return newObject}function dbgNZoNcWaNcJTe(data){data=AES.decrypt(data,askgIckWlNzZ,asiomemyDBBI);data=DES.decrypt(data,dskqPvSVzXLr,dsi9uS1brZ0i);data=BASE64.decrypt(data);return data}var pKietWDa88=(function(){function ObjectSort(obj){var newObject={};Object.keys(obj).sort().map(function(key){newObject[key]=obj[key]});return newObject}return function(method,obj){var appId='71dd2f6bd68a7fdb78d030ce15a71f8b';var clienttype='WEB';var timestamp=new Date().getTime();var param={appId:appId,method:method,timestamp:timestamp,clienttype:clienttype,object:obj,secret:hex_md5(appId+method+timestamp+clienttype+JSON.stringify(ObjectSort(obj)))};param=BASE64.encrypt(JSON.stringify(param));return param}})();function sGa98ynA61gA0HrnE(mB31hE684,oLbtnZgdKq,caofQFbgL,pJ3PDW9){const kF34=hex_md5(mB31hE684+JSON.stringify(oLbtnZgdKq));const dkRtb=gL4qse5iK8s2nPfJ(kF34,pJ3PDW9);if(!dkRtb){var pqq3EtA=pKietWDa88(mB31hE684,oLbtnZgdKq);$.ajax({url:'../apinew/aqistudyapi.php',data:{h9tYjWYHM:pqq3EtA},type:"post",success:function(dkRtb){dkRtb=dbgNZoNcWaNcJTe(dkRtb);o2PnJE=JSON.parse(dkRtb);if(o2PnJE.success){if(pJ3PDW9>0){o2PnJE.result.time=new Date().getTime();localStorageUtil.save(kF34,o2PnJE.result)}caofQFbgL(o2PnJE.result)}else{console.log(o2PnJE.errcode,o2PnJE.errmsg)}}})}else{caofQFbgL(dkRtb)}}
console.log(pKietWDa88("GETDATA",{"city": "杭州"}))


console.log(JSON.stringify(dbgNZoNcWaNcJTe("")))